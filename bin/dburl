#!/usr/bin/env ruby

require 'uri'
require 'optparse'

OptionParser.new do |opts|
  opts.on '-d', '--debug', 'Print connection command and exit' do
    $debug = true
  end
end.parse!

input = ARGV.first

unless input
  puts 'Usage: dburl [DATABASE_URL]'
  exit
end

def invalid!
  puts "Couldn't parse your input. Was it a valid database URL?"
  exit
end


begin
  db = URI.parse ARGV.first
  db.path = nil if db.path.empty?
rescue URI::InvalidURIError
  invalid!
else
  invalid! unless db.scheme
end

# To add a support for a new DB, add a new condition
# to this case staement.
#
# Use the `db` object to build a `cmd` string, which gets
# printed and executed at the bottom of the file.
#
# Set the $debug global to disable execution for
# convenient hacking.
case db.scheme
when 'postgres'
  cmd = 'psql'
  cmd += " -h #{db.host}" if db.host
  cmd += " -p #{db.port}" if db.port
  cmd += " -U #{db.user}" if db.user
  cmd += " -d #{db.path[1..-1]}" if db.path

  cmd = "PGPASSWORD=#{db.password} #{cmd}" if db.password
when 'redis'
  cmd = 'redis-cli'
  cmd += " -h #{db.host}" if db.host
  cmd += " -p #{db.port}" if db.port
  cmd += " -a #{db.password}" if db.password
  cmd += " -n #{db.path[1..-1]}" if db.path
else
  puts "This script doesn't support #{db.scheme} yet."
  puts 'Please add it and open a pull request.'
end

puts cmd
Kernel.exec cmd unless $debug
